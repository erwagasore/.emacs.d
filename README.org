#+PROPERTY: header-args :tangle init.el :comments yes :results silent
* UI TWEAKS
   #+begin_src emacs-lisp
     ;; remove default menu bar
     (menu-bar-mode -1)

     ;; always highlighting active line
     (global-hl-line-mode t)

     ;; hide both frame title bar and the icon
     (setq ns-use-proxy-icon  -1
	   frame-title-format -1)

     ;; disable these GUI based behaviors
     (when window-system
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1))

     ;; disable and customize startup message
     (setq inhibit-startup-message 1
	   initial-scratch-message ";; Happy Hacking\n")

     ;; make identical buffer names unique
     (setq uniquify-buffer-name-style 'reverse
	   uniquify-separator "|"
	   uniquify-after-kill-buffer-p t
	   uniquify-ignore-buffers-re "^\\*")
   #+end_src

* OTHER DEFAULTS
   #+begin_src emacs-lisp
     ;; disable backup
     (setq make-backup-files -1)

     ;; delete selected text on-type
     (delete-selection-mode 1)

     ;; define alias to answering just 'y' or 'n' instead
     (defalias 'yes-or-no-p 'y-or-n-p)

     ;; Don't make new frames when opening a new file with Emacs
     (setq ns-pop-up-frames nil)

     ;; Suppress warning
     (setq ad-redefinition-action 'accept)

     ;; activate column-number-mode
     (column-number-mode 1)
     (setq-default indicate-buffer-boundaries 'right)

     ;; define abbrev file
     (setq abbrev-file-name (expand-file-name "abbrev.el" user-emacs-directory))
     (unless (file-exists-p abbrev-file-name)
       (write-region "" "" abbrev-file-name))
     ;; (load abbrev-file-name)

     ;; define custom file
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (unless (file-exists-p custom-file)
       (write-region "" "" custom-file))
     (load custom-file)
   #+end_src
* GLOBAL BINDINGS
#+begin_src emacs-lisp
  ;; dependable keybindings
  (global-set-key (kbd "C-c l") #'goto-line)
  (global-set-key (kbd "\C-c n") #'rename-buffer)
  (global-set-key (kbd "<C-s-return>") #'toggle-frame-fullscreen)
#+end_src
* PACKAGE MANAGER
  #+begin_src emacs-lisp
    (require 'package)

    ;; define package manager mirros
    (add-to-list 'package-archives
		 '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (add-to-list 'package-archives
	   '("melpa" . "https://melpa.org/packages/") t)
    (add-to-list 'package-archives
	   '("org" . "https://orgmode.org/elpa/") t)

    ;; initialize defined mirrors
    (package-initialize)

    ;; refresh packages from mirrors
    ;; install use-package if not already installed
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
    (require 'use-package)
    ;; authorize use package to have ensure set to true by default
    (setq use-package-always-ensure t)

    ;; automatically update packages
    ; delete old packages, don't bother showing the results
    (use-package auto-package-update
      :config
      (setq auto-package-update-delete-old-versions t
	    auto-package-update-hide-results t)
      (auto-package-update-maybe))
  #+end_src
* MAC CONFIGS
  #+begin_src emacs-lisp
    ;; set bash environment variables
    (use-package exec-path-from-shell
      :if (memq window-system '(mac ns))
      :config (exec-path-from-shell-initialize))

    ;; enable transparent titlebar with dark-mode
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src
* TEXT RENDERING
  #+begin_src emacs-lisp
    ;; define the font family and size
    (set-frame-font "PragmataPro-15" nil t)
    (setq-default line-spacing 5)

    ;; set pragmatapro ligatures from external file
    (load-file "~/.emacs.d/pragmatapro-lig.el")
    (pragmatapro-lig-global-mode t)

    ;; define words with special meaning and activate them
    (defun watchwords ()
      (font-lock-add-keywords
       nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
	      1 font-lock-warning-face t))))

    (add-hook 'prog-mode-hook 'watchwords)
  #+end_src
* THEMING
  #+begin_src emacs-lisp
    ;; Using ~M-x all-the-icons-fonts~ you can install the fonts
    (use-package all-the-icons
      :config (setq inhibit-compacting-font-caches t))

    (use-package doom-themes
      :init (load-theme 'doom-one t)
      :config
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

    (use-package doom-modeline
      :defer t
      :hook (after-init . doom-modeline-init))
  #+end_src
* CURSOR STYLING
#+begin_src emacs-lisp
  (setq-default cursor-type '(bar . 1)
	  blink-cursor-delay 0
	  blink-cursor-interval 0.4)

  ;; flashes the cursor's line switched buffer
  (use-package beacon
    :config
    (beacon-mode t)
    (setq beacon-color "#0057FF"))
#+end_src
* LINTING & SPELLING
** DONE Flyspell
#+BEGIN_SRC emacs-lisp
  ;; (use-package flyspell
  ;;   :hook ((prog-mode . flyspell-prog-mode)
  ;; 	 (text-mode . flyspell-mode))
  ;;   :config
  ;;   (setq ispell-program-name (executable-find "hunspell"))
  ;;   (setq ispell-local-dictionary "en_GB")
  ;;   (flyspell-mode 1))
#+END_SRC
** TODO Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :hook ((prog-mode . flycheck-mode))
    :config
    (setq flycheck-python-flake8-executable "flake8")
    (setq flycheck-highlighting-mode 'lines))
#+END_SRC
* EGLOT
  #+begin_src emacs-lisp
    (use-package eglot
      :ensure t
      :commands (eglot eglot-ensure)
      :hook ((rust-mode python-mode dart-mode typescript-mode javascript-mode) . eglot-ensure)
      :config
      ;; fix column calculation when ligatures are used
      (setq eglot-current-column-function 'eglot-lsp-abiding-column))
  #+end_src
* COMPANY
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn 
      (setq company-idle-delay 0.2
	    company-tooltip-limit 20
	    company-minimum-prefix-length 2
	    company-echo-delay 0
	    company-dabbrev-downcase nil)
    
      (add-hook 'after-init-hook 'global-company-mode)

      (eval-after-load 'company
	`(let (( Map  company-active-map))
	   (define-key company-active-map (kbd "\C-n") 'company-select-next)
	   (define-key company-active-map (kbd "\C-n") 'company-select-next)
	   (define-key company-active-map (kbd "\C-p") 'company-select-previous)
	   (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
	   (define-key company-active-map (kbd "<tab>") 'company-complete)))))
#+end_src
* CLI CLIENTS
** MAGIT
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :init (magit-auto-revert-mode -1)
       :bind ("C-x g" . magit-status))
#+END_SRC
** TODO GITGUTTER
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (use-package git-gutter-fringe
	:ensure t
	:init (global-git-gutter-mode))
    (use-package git-gutter
      :ensure t
      :init (global-git-gutter-mode)))
#+end_src
** TODO DOCKER
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)

  (use-package docker-compose-mode
    :ensure t)

  (use-package docker-tramp
    :ensure t)
#+end_src
** TODO REST-CLIENT
#+begin_src emacs-lisp
  (use-package restclient
    :config (add-hook 'restclient-mode-hook 'company-restclient))

  (use-package company-restclient
    :config
    (progn
      (add-hook 'restclient-mode-hook
		(lambda ()
		  (set (make-local-variable 'company-backends)'(company-restclient))
		  (company-mode t)))))

  (use-package ob-restclient
    :config 
    (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))
#+end_src
* WRITING & READING
** TODO EPUB
#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode)
    :config (progn
	      (setq nov-text-width 80)
	      (setq nov-variable-pitch nil)))
#+end_src
** TODO ORG
*** DONE Get the newest version of org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :config (setq
	     org-src-fontify-natively t
	     org-src-tab-acts-natively t
	     org-todo-keywords '((sequence "BACKLOG(b)" "TODO(t)" "DOING(n)" "|" "DONE(d)")
				 (sequence "|"  "ONHOLD(h)" "CANCELED(c)"))
	     org-agenda-files '("~/.org/agenda.org")))
#+END_SRC
** TODO MARKDOWN
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.markdown\\'" . markdown-mode)
	   ("\\.md\\'"       . markdown-mode)))
#+end_src
* MAJOR MODES
** TODO IVY / COUNSEL / SWIPER
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init (ivy-mode t)
    :config
    (setq ivy-count-format ""
	  ivy-re-builders-alist '((t   . ivy--regex-ignore-order))
	  ivy-initial-inputs-alist nil
	  ivy-extra-directories nil
	  ivy-height 8
	  ivy-re-builders-alist
	  '((swiper . ivy--regex-plus)
	    (t      . ivy--regex-fuzzy))))

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x C-m" . counsel-M-x)))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))

  (use-package all-the-icons-ivy
    :ensure t
    :config
    (all-the-icons-ivy-setup))

  (use-package ivy-explorer
    :ensure t
    :config
    (ivy-explorer-mode t)
    (counsel-mode t))

#+end_src
** TODO ANZU
#+begin_src emacs-lisp
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode t)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (global-set-key [remap query-replace] 'anzu-query-replace))
#+end_src
** TODO WHITESPACE
#+begin_src emacs-lisp
  (use-package whitespace
    :bind ("\C-c w" . whitespace-mode))
#+end_src
** TODO PARINFER
#+begin_src emacs-lisp
  ;; disable electric pair and show parent
  (electric-pair-mode -1)
  (show-paren-mode -1)

  ;; favor smartparens instead
  (use-package smartparens
    :config
    (require 'smartparens-config)
    (show-smartparens-global-mode 1)
    (smartparens-global-mode 1))

  ;; parinfer is the best especially with lisp dialects
  (use-package parinfer
    :ensure t
    :bind (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
	    '(defaults       ; should be included.
	       pretty-parens  ; different paren styles for different modes.
	       smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
	       smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src
** TODO WHICH-KEY
#+begin_src emacs-lisp
  ;; Which Key
  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config (which-key-mode))
#+end_src
** TODO TEXT-SCALING
#+begin_src emacs-lisp
  ;; font scaling
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-s-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-s--") 'default-text-scale-decrease))
#+end_src
** TODO PROJECTILE
   #+begin_src emacs-lisp
     (use-package projectile
       :ensure t
       :bind-keymap ("C-c p" . projectile-command-map)
       :config (projectile-mode 1)
       (use-package counsel-projectile
	 :ensure t
	 :after counsel
	 :config (counsel-projectile-mode))
       (setq projectile-project-search-path '("~/Projects"))
       (projectile-register-project-type 'flask '("setup.py") 
					 :compile "flask run"
					 :test "flask test"
					 :src-dir "app/")
       (projectile-register-project-type 'js '("package.json") 
					 :compile "yarn start"
					 :test "yarn test"
					 :src-dir "src/"))
   #+end_src
* LANGUAGES
** TODO PYTHON
#+begin_src emacs-lisp
  (use-package python-mode
    :ensure t)

  (use-package pyenv-mode
    :ensure t)

  (use-package pyenv-mode-auto
    :ensure t)

  (use-package blacken
    :ensure t
    :after (python)
    :hook ((python-mode . blacken-mode)))
#+end_src
** TODO RUST
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)

  (use-package cargo
    :ensure t
    :config
    (add-hook 'rust-mode-hook #'cargo-minor-mode))

  (use-package flycheck-rust
    :ensure t
    :after (rust-mode)
    :hook ((flycheck-mode . flycheck-rust-setup)))
#+end_src
** TODO DART
   #+begin_src emacs-lisp
     (use-package dart-mode
       :ensure t)
   #+end_src
** TODO WEB
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mdx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-markup-indent-offset 2))
#+end_src
** TODO JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :ensure t
    :defer t
    :mode "\\.json$")
#+end_src
** TODO TYPESCRIPT
   #+begin_src emacs-lisp
     (use-package typescript-mode
       :ensure t
       :mode (("\\.ts\\'" . typescript-mode)
	      ("\\.tsx\\'" . typescript-mode)))
   #+end_src
* ESHELL
#+begin_src emacs-lisp
  (use-package eshell
    :init
    (setq
     eshell-banner-message "...\n"
     eshell-hist-ignoredups t
     eshell-error-if-no-glob t
     eshell-cmpl-ignore-case t
     eshell-save-history-on-exit t
     eshell-prefer-lisp-functions nil
     eshell-destroy-buffer-when-process-dies t
     eshell-scroll-to-bottom-on-input 'all)
    :config
    (defun eshell/clear ()
      "Clear eshell buffer"
      (interactive)
      (let ((inhibit-read-only t))
	(eshell/clear-scrollback)
	(eshell-flush -1)
	(if (eshell-exit-success-p) (message "...") (message "...")))))

  (require 'magit)
  (defun display-git-prompt-branch ()
    (if (not (null (magit-get-current-branch))) (concat "￨" (magit-get-current-branch)) ""))

  (defun get-first-char (str)
    (if (zerop (length str)) "" (substring str 0 1)))

  (defun fill-window-with-char ()
    (make-string (window-body-width) ?_))

  (defun pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((path-items (split-string pwd "/")))
      (if (> (length path-items) 2)
	  (concat
	   (mapconcat 'get-first-char (butlast path-items 2) "/")
	   "/"
	   (mapconcat (lambda (item) item) (last path-items 2) "/"))
	pwd)))

  (setq eshell-prompt-function
	(lambda nil
	  (concat
	   (propertize (fill-window-with-char) 'face '(:foreground "#234768"))
	   (propertize "\n" 'face nil)
	   (propertize "╭⟢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil)
	   (propertize (user-login-name) 'face '(:foreground "#5DC078"))
	   (propertize "@" 'face '(:foreground "#0057FF"))
	   (propertize (system-name) 'face '(:foreground "#0083FF"))
	   (propertize " ⯌ " 'face nil)
	   (propertize "￨" 'face '(:foreground "#74CAFF"))
	   (propertize (pwd-shorten-dirs (abbreviate-file-name (eshell/pwd)))
		       'face '(:foreground "#74CAFF"))
	   (propertize " ⯌ " 'face nil)
	   (propertize (display-git-prompt-branch) 'face '(:foreground "#A2DEB2"))
	   (propertize "\n" 'face nil)
	   (propertize "╰🡢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil))))

  (setq eshell-highlight-prompt nil)

  ;; handle visual commands
  (require 'em-term)
  (add-to-list `eshell-visual-commands "top")
  (add-to-list `eshell-visual-subcommands '("git" "log" "diff" "show"))
  (add-to-list `eshell-visual-options '("git" "--help"))

  ;; Set this to match eshell-prompt-function
  (setq eshell-prompt-regexp "^╰🡢 ")

  ;; define portable aliases
  (setq eshell-command-aliases-list ())

  (defun +alias (al cmd)
    "handy wrapper function to convert alias symbols to alias
	  strings to avoid writing 4 quotes per alias. AL is a single-word
	  symbol naming the alias, CMD is a list symbol describing the
	  command."
    (add-to-list 'eshell-command-aliases-list
		 (list (symbol-name al)
		       (mapconcat 'symbol-name cmd " "))))

  ;; actual aliases
  (+alias 'l      '(ls -laF))
  (+alias 'll     '(ls -l))
  (+alias 'la     '(ls -a))
  (+alias 'lt     '(ls -ltr $*))
  (+alias '..     '(cd ..))
  (+alias '...    '(cd ../..))
  (+alias '....   '(cd ../../..))
  (+alias '.....  '(cd ../../../..))
  (+alias 'md     '(mkdir -p))
  (+alias 'emacs  '(find-file $1))
  (+alias 'less   '(find-file-read-only $1))

  ;; Docker
  (+alias 'd '(docker $*))
  (+alias 'dc '(docker-compose $*))
  (+alias 'dm '(docker-machine $*))

  ;; HTTPie
  (+alias 'https '(http --default-scheme=https $*))
#+end_src
* COMMENT Local Variables
# Local variables:
# eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t)
# end:
