#+PROPERTY: header-args :tangle init.el :comments yes :results silent
* BUMP GARBAGE COLLECTION
  #+begin_src emacs-lisp
    ;; Make startup faster by reducing the frequency of garbage
    ;; collection.  The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 80 1000 1000))
  #+end_src
* UI CLEANUP
   #+begin_src emacs-lisp
     ;; remove default menu bar
     (menu-bar-mode -1)

     ;; disable electric pair and show parent
     (electric-pair-mode -1)
     (show-paren-mode -1)

     ;; hide both frame title bar and the icon
     (setq ns-use-proxy-icon  -1
	   frame-title-format -1)

     ;; disable these GUI based behaviors
     (when window-system
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1))

     ;; disable and customize startup message
     (setq inhibit-startup-message 1
	   initial-scratch-message ";; Happy Hacking\n")
   #+end_src
* TEXT RENDERING
  #+begin_src emacs-lisp
    ;; define the font family and size
    (set-frame-font "PragmataPro-15" nil t)
    ;; (setq-default line-spacing 5)

    ;; set pragmatapro ligatures from external file
    (load-file "~/.emacs.d/pragmatapro-lig.el")
    (pragmatapro-lig-global-mode t)

    ;; define words with special meaning and activate them
    (defun watchwords ()
      (font-lock-add-keywords
       nil '(("\\<\\(FIX\\(ME\\)?\\|TODO\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
	      1 font-lock-warning-face t))))
    (add-hook 'prog-mode-hook 'watchwords)
  #+end_src
* MAC CONFIGS
  #+begin_src emacs-lisp
    ;; enable transparent titlebar with dark-mode
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src
* UX CLEANUP
  #+begin_src emacs-lisp
    ;; disable backup
    (setq make-backup-files -1)

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames -1)

    ;; define alias to answering just 'y' or 'n' instead
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; Highlight the current line
    (use-package hl-line
      :hook (after-init . global-hl-line-mode))

    ;; nice scrolling
    (setq scroll-margin 0
	  scroll-conservatively 100000
	  scroll-preserve-screen-position 1)

    ;; make buffer name unique with style
    (setq uniquify-buffer-name-style 'reverse
	  uniquify-separator "|"
	  uniquify-after-kill-buffer-p 1
	  uniquify-ignore-buffers-re "^\\*")
  #+end_src
* GLOBAL BINDINGS
#+begin_src emacs-lisp
  ;; dependable keybindings
  (global-set-key (kbd "C-c l") #'goto-line)
  (global-set-key (kbd "\C-c n") #'rename-buffer)
  (global-set-key (kbd "C-c w") #'whitespace-mode)
  (global-set-key (kbd "<C-s-return>") #'toggle-frame-fullscreen)
#+end_src
* PACKAGE MANAGER
  #+BEGIN_SRC emacs-lisp
    (require 'package)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "http://elpa.emacs-china.org/gnu/"))
    (package-initialize)


    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+END_SRC
* THEMING
  #+BEGIN_SRC emacs-lisp
    ; Using ~M-x all-the-icons-fonts~ you can install the fonts
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold nil
	    doom-themes-enable-italic nil)
      (load-theme 'doom-vibrant t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-init))

    (use-package all-the-icons
      :ensure t
      :config (setq inhibit-compacting-font-caches t))
  #+END_SRC
* OTHER DEFAULTS
   #+begin_src emacs-lisp
     ;; default directory for dire-mode
     (setq default-directory "~/")

     ;; don't backup please. I got this
     (setq make-backup-files nil)

     ;; activate column-number-mode
     (column-number-mode 1)
     (setq-default indicate-buffer-boundaries 'right)

     ;; set bash environment variables
     (use-package exec-path-from-shell
       :ensure t
       :if (memq window-system '(mac ns))
       :config (exec-path-from-shell-initialize))

     ;; setup hydra early so that it can be used everywhere
     (use-package hydra :ensure t)
     ;; extend use-package with :hydra keyword
     (use-package use-package-hydra :ensure t)

     ;; define abbrev file
     (setq abbrev-file-name (expand-file-name "abbrev.el" user-emacs-directory))
     (unless (file-exists-p abbrev-file-name)
       (write-region "" "" abbrev-file-name))

     ;; supress some warning
     (setq ad-redefinition-action 'accept)
   #+end_src
* CURSOR STYLING
#+begin_src emacs-lisp
  (setq-default cursor-type '(bar . 1)
	  blink-cursor-delay 0
	  blink-cursor-interval 0.4)

  ;; flashes the cursor's line switched buffer
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t)
    (setq beacon-color "#0057FF"))
#+end_src
* FLYCHECK
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :hook ((prog-mode . flycheck-mode))
      :config
      (setq flycheck-highlighting-mode 'lines)
      (add-to-list 'flycheck-checkers 'dart-analysis-server))
  #+end_src
* WHICH-KEY
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :custom
      (which-key-separator " ")
      (which-key-prefix-prefix "+")
      :config (which-key-mode t))
  #+end_src
* COMMENT STANDALONE HYDRAS
  #+BEGIN_SRC emacs-lisp
    (defhydra hydra-zoom (global-map "s-=")
      "zoom"
      ("n" text-scale-increase "in")
      ("0" text-scale-adjust "equal")
      ("p" text-scale-decrease "out"))
  #+END_SRC
* COUNSEL
  #+BEGIN_SRC emacs-lisp
	(use-package amx :ensure t)
	(use-package flx :ensure t)

	(use-package counsel
	  :ensure t
	  :config
	  (ivy-mode t)
	  (setq ivy-use-virtual-buffers t
		ivy-initial-inputs-alist nil
		enable-recursive-minibuffers t
		search-default-mode #'char-fold-to-regexp
		ivy-re-builders-alist
		'((ivy-switch-buffer . ivy--regex-plus)
		  (t . ivy--regex-fuzzy)))
	  :bind (("C-s" . counsel-grep-or-swiper)
		 ("M-x" . counsel-M-x)
		 ("C-x C-m" . counsel-M-x)
		 ("C-x C-f" . counsel-find-file)))

	(use-package all-the-icons-ivy
	  :ensure t
	  :config
	  (all-the-icons-ivy-setup))
  #+END_SRC
* PROJECTILE
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :config (projectile-mode t))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  #+END_SRC
* COMPANY
  #+BEGIN_SRC emacs-lisp
    (use-package company
      :ensure t
      :config
      (global-company-mode t)
      (setq company-tooltip-limit 10
	    company-dabbrev-downcase 0
	    company-idle-delay 0
	    company-echo-delay 0
	    company-minimum-prefix-length 1
	    company-require-match nil
	    company-selection-wrap-around t
	    company-tooltip-align-annotations t
	    company-tooltip-flip-when-above t)
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)
      (define-key company-active-map (kbd "TAB") 'company-complete)
      (define-key company-active-map (kbd "<tab>") 'company-complete))
  #+END_SRC
* ORG
   #+BEGIN_SRC emacs-lisp
     (use-package org
      :ensure t
      :config (setq
	       org-src-fontify-natively t
	       org-src-tab-acts-natively t
	       org-todo-keywords '((sequence "BACKLOG(b)" "TODO(t)" "DOING(n)" "|" "DONE(d)")
				   (sequence "|"  "ONHOLD(h)" "CANCELED(c)"))
	       org-agenda-files '("~/.org/agenda.org")))


     (use-package restclient
       :ensure t
       :config (add-hook 'restclient-mode-hook 'company-restclient))

     (use-package company-restclient
       :ensure t
       :config
       (progn
	 (add-hook 'restclient-mode-hook
		   (lambda ()
		     (set (make-local-variable 'company-backends)'(company-restclient))
		     (company-mode t)))))

     (use-package ob-restclient
       :ensure t
       :config 
       (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))

   #+END_SRC
* LSP
  #+BEGIN_SRC emacs-lisp
	(use-package lsp-mode
	  :ensure t
	  :config
	  ;; (add-hook 'python-mode-hook #'lsp)
	  ;; (add-hook 'dart-mode-hook #'lsp)
	  (setq lsp-prefer-flymake nil))

	(use-package lsp-ui
	  :ensure t
	  :requires lsp-mode flycheck
	  :config
	  (setq lsp-ui-sideline-enable nil
		lsp-ui-flycheck-enable t
		lsp-ui-flycheck-list-position 'right
		lsp-ui-flycheck-live-reporting t
		lsp-ui-peek-enable t
		lsp-ui-peek-list-width 60
		lsp-ui-peek-peek-height 24)
	  :hook (lsp-mode . lsp-ui-mode))

	(use-package company-lsp
	  :ensure t
	  :requires company
	  :config
	  (push 'company-lsp company-backends)
	  (setq company-transformers nil
		company-lsp-async t
		company-lsp-cache-candidates nil))

	(use-package yasnippet
	  :ensure t
	  :diminish yas-minor-mode
	  :config
	  (use-package yasnippet-snippets :ensure t)
	  (yas-global-mode t))
  #+END_SRC
* LANGUAGE UTILS
  #+BEGIN_SRC emacs-lisp
    (use-package highlight-indent-guides
      :ensure t
      :hook (prog-mode . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-character ?\â”‚)
      (highlight-indent-guides-auto-odd-face-perc 2)
      (highlight-indent-guides-auto-even-face-perc 2)
      (highlight-indent-guides-auto-character-face-perc 8)
      (highlight-indent-guides-method 'character)
      (highlight-indent-guides-responsive 'character)
      (highlight-indent-guides-delay 0))
  #+END_SRC
* LANGUAGES
** PYTHON
   #+begin_src emacs-lisp
     (use-package lsp-python-ms
       :ensure t
       :hook (python-mode . (lambda () (require 'lsp-python-ms) (lsp))))

     ;; (use-package pyenv-mode :ensure t)

     ;; (use-package pyenv-mode-auto :ensure t)

     ;; (use-package blacken
     ;; :after python
     ;; :hook (python-mode . blacken-mode))
   #+end_src
** DART
   #+begin_src emacs-lisp
	  (use-package dart-mode
	    :ensure t
	    :after lsp
	    :hook (dart-mode . lsp)
	    :custom
	    (dart-format-on-save t)
	    (dart-sdk-path "~/flutter/bin/cache/dart-sdk/")
	    (with-eval-after-load "projectile"
	      (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
	      (add-to-list 'projectile-project-root-files-bottom-up "BUILD"))
	    (lsp-auto-guess-root t))

	  (use-package flutter
	    :ensure t
	    :after dart-mode
	    :bind (:map dart-mode-map ("C-M-x" . #'flutter-run-or-hot-reload))
	    :custom (flutter-sdk-path "~/flutter/"))
   #+end_src
** COMMENT RUST
#+begin_src emacs-lisp
  (use-package rust-mode
    :defer 5)

  (use-package cargo
    :defer 5
    :config
    (add-hook 'rust-mode-hook #'cargo-minor-mode))

  (use-package flycheck-rust
    :defer 5
    :after (rust-mode)
    :hook ((flycheck-mode . flycheck-rust-setup)))
#+end_src
** COMMENT WEB
#+begin_src emacs-lisp
  (use-package web-mode
    :defer 5
    :config
    (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mdx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-markup-indent-offset 2))
#+end_src
** COMMENT JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :defer 5
    :mode "\\.json$")
#+end_src
* CLI CLIENTS
** GIT
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :init (magit-auto-revert-mode -1)
       :bind ("C-x g" . magit-status))

     (if (display-graphic-p)
	 (use-package git-gutter-fringe
	   :ensure t
	   :init (global-git-gutter-mode))
       (use-package git-gutter
	 :ensure t
	 :init (global-git-gutter-mode)))
#+end_src
** DOCKER
#+begin_src emacs-lisp
  (use-package dockerfile-mode :ensure t)
  (use-package docker-compose-mode :ensure t)
  (use-package docker-tramp :ensure t)
#+end_src
* COMMENT ESHELL
#+begin_src emacs-lisp
  (use-package eshell
    :init
    (setq
     eshell-banner-message "...\n"
     eshell-hist-ignoredups t
     eshell-error-if-no-glob t
     eshell-cmpl-ignore-case t
     eshell-save-history-on-exit t
     eshell-prefer-lisp-functions nil
     eshell-destroy-buffer-when-process-dies t
     eshell-scroll-to-bottom-on-input 'all))

  (require 'magit)
  (defun display-git-prompt-branch ()
    (if (not (null (magit-get-current-branch))) (concat "ï€ ï¿¨" (magit-get-current-branch)) ""))

  (defun get-first-char (str)
    (if (zerop (length str)) "" (substring str 0 1)))

  (defun fill-window-with-char ()
    (make-string (window-body-width) ?_))

  (defun pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((path-items (split-string pwd "/")))
      (if (> (length path-items) 2)
	  (concat
	   (mapconcat 'get-first-char (butlast path-items 2) "/")
	   "/"
	   (mapconcat (lambda (item) item) (last path-items 2) "/"))
	pwd)))

  (setq eshell-prompt-function
	(lambda nil
	  (concat
	   (propertize (fill-window-with-char) 'face '(:foreground "#234768"))
	   (propertize "\n" 'face nil)
	   (propertize "â•­âŸ¢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil)
	   (propertize (user-login-name) 'face '(:foreground "#5DC078"))
	   (propertize "@" 'face '(:foreground "#0057FF"))
	   (propertize (system-name) 'face '(:foreground "#0083FF"))
	   (propertize " â¯Œ " 'face nil)
	   (propertize "ï„•ï¿¨" 'face '(:foreground "#74CAFF"))
	   (propertize (pwd-shorten-dirs (abbreviate-file-name (eshell/pwd)))
		       'face '(:foreground "#74CAFF"))
	   (propertize " â¯Œ " 'face nil)
	   (propertize (display-git-prompt-branch) 'face '(:foreground "#A2DEB2"))
	   (propertize "\n" 'face nil)
	   (propertize "â•°ðŸ¡¢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil))))

  (setq eshell-highlight-prompt nil)

  ;; handle visual commands
  (require 'em-term)
  (add-to-list `eshell-visual-commands "top")
  (add-to-list `eshell-visual-subcommands '("git" "log" "diff" "show"))
  (add-to-list `eshell-visual-options '("git" "--help"))

  ;; Set this to match eshell-prompt-function
  (setq eshell-prompt-regexp "^â•°ðŸ¡¢ ")

  ;; define portable aliases
  (setq eshell-command-aliases-list ())

  (defun +alias (al cmd)
    "handy wrapper function to convert alias symbols to alias
	  strings to avoid writing 4 quotes per alias. AL is a single-word
	  symbol naming the alias, CMD is a list symbol describing the
	  command."
    (add-to-list 'eshell-command-aliases-list
		 (list (symbol-name al)
		       (mapconcat 'symbol-name cmd " "))))

  ;; actual aliases
  (+alias 'l      '(ls -laF))
  (+alias 'll     '(ls -l))
  (+alias 'la     '(ls -a))
  (+alias 'lt     '(ls -ltr $*))
  (+alias '..     '(cd ..))
  (+alias '...    '(cd ../..))
  (+alias '....   '(cd ../../..))
  (+alias '.....  '(cd ../../../..))
  (+alias 'md     '(mkdir -p))
  (+alias 'emacs  '(find-file $1))
  (+alias 'less   '(find-file-read-only $1))

  ;; Docker
  (+alias 'd '(docker $*))
  (+alias 'dc '(docker-compose $*))
  (+alias 'dm '(docker-machine $*))

  ;; HTTPie
  (+alias 'https '(http --default-scheme=https $*))
#+end_src
* CUSTOM.EL CONFIG FILE
  #+begin_src emacs-lisp
    (add-hook
     'after-init-hook
     (lambda ()
       (let ((custom-file
	      (expand-file-name "custom.el" user-emacs-directory)))
	 (unless (file-exists-p custom-file)
	   (write-region "" "" custom-file))
	 (load custom-file))))
  #+end_src
* REDUCE GARBAGE COLLECTION
  #+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
  #+end_src

* COMMENT Local Variables
# Local variables:
# eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t)
# end:
