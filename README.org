#+PROPERTY: header-args :tangle init.el :comments yes :results silent
* BUMP GARBAGE COLLECTION
  #+begin_src emacs-lisp
    ;; Make startup faster by reducing the frequency of garbage
    ;; collection.  The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 512 1000 1000))
  #+end_src
* UI CLEANUP
   #+begin_src emacs-lisp
     ;; remove default menu bar
     (menu-bar-mode nil)

     ;; disable electric pair and show parent
     (electric-pair-mode nil)
     (show-paren-mode nil)

     ;; hide both frame title bar and the icon
     (setq ns-use-proxy-icon  nil
	   frame-title-format nil)

     ;; disable these GUI based behaviors
     (when window-system
       (scroll-bar-mode -1)
       (tool-bar-mode -1)
       (tooltip-mode -1))

     ;; disable and customize startup message
     (setq inhibit-startup-message t
	   initial-scratch-message ";; Happy Hacking\n")
   #+end_src
* TEXT RENDERING
  #+begin_src emacs-lisp
    ;; define the font family and size
    (set-frame-font "PragmataPro-13" nil t)

    (setq prettify-symbols-unprettify-at-point 'right-edge)

    (defconst pragmatapro-prettify-symbols-alist
      (mapcar (lambda (s)
		`(,(car s)
		  .
		  ,(vconcat
		    (apply 'vconcat
			   (make-list
			    (- (length (car s)) 1)
			    (vector (decode-char 'ucs #X0020) '(Br . Bl))))
		    (vector (decode-char 'ucs (cadr s))))))
	      '(("[ERROR]"    #XE2C0)
		("[DEBUG]"    #XE2C1)
		("[INFO]"     #XE2C2)
		("[WARN]"     #XE2C3)
		("[WARNING]"  #XE2C4)
		("[ERR]"      #XE2C5)
		("[FATAL]"    #XE2C6)
		("[TRACE]"    #XE2C7)
		("[FIXME]"    #XE2C8)
		("[TODO]"     #XE2C9)
		("[BUG]"      #XE2CA)
		("[NOTE]"     #XE2CB)
		("[HACK]"     #XE2CC)
		("[MARK]"     #XE2CD)
		("# ERROR"    #XE2F0)
		("# DEBUG"    #XE2F1)
		("# INFO"     #XE2F2)
		("# WARN"     #XE2F3)
		("# WARNING"  #XE2F4)
		("# ERR"      #XE2F5)
		("# FATAL"    #XE2F6)
		("# TRACE"    #XE2F7)
		("# FIXME"    #XE2F8)
		("# TODO"     #XE2F9)
		("# BUG"      #XE2FA)
		("# NOTE"     #XE2FB)
		("# HACK"     #XE2FC)
		("# MARK"     #XE2FD)
		("// ERROR"   #XE2E0)
		("// DEBUG"   #XE2E1)
		("// INFO"    #XE2E2)
		("// WARN"    #XE2E3)
		("// WARNING" #XE2E4)
		("// ERR"     #XE2E5)
		("// FATAL"   #XE2E6)
		("// TRACE"   #XE2E7)
		("// FIXME"   #XE2E8)
		("// TODO"    #XE2E9)
		("// BUG"     #XE2EA)
		("// NOTE"    #XE2EB)
		("// HACK"    #XE2EC)
		("// MARK"    #XE2ED)
		("!!"         #XE900)
		("!="         #XE901)
		("!=="        #XE902)
		("!!!"        #XE903)
		("!≡"         #XE904)
		("!≡≡"        #XE905)
		("!>"         #XE906)
		("!=<"        #XE907)
		("#("         #XE920)
		("#_"         #XE921)
		("#{"         #XE922)
		("#?"         #XE923)
		("#>"         #XE924)
		("##"         #XE925)
		("#_("        #XE926)
		("%="         #XE930)
		("%>"         #XE931)
		("%>%"        #XE932)
		("%<%"        #XE933)
		("&%"         #XE940)
		("&&"         #XE941)
		("&*"         #XE942)
		("&+"         #XE943)
		("&-"         #XE944)
		("&/"         #XE945)
		("&="         #XE946)
		("&&&"        #XE947)
		("&>"         #XE948)
		("$>"         #XE955)
		("***"        #XE960)
		("*="         #XE961)
		("*/"         #XE962)
		("*>"         #XE963)
		("++"         #XE970)
		("+++"        #XE971)
		("+="         #XE972)
		("+>"         #XE973)
		("++="        #XE974)
		("--"         #XE980)
		("-<"         #XE981)
		("-<<"        #XE982)
		("-="         #XE983)
		("->"         #XE984)
		("->>"        #XE985)
		("---"        #XE986)
		("-->"        #XE987)
		("-+-"        #XE988)
		("-\\/"       #XE989)
		("-|>"        #XE98A)
		("-<|"        #XE98B)
		(".."         #XE990)
		("..."        #XE991)
		("..<"        #XE992)
		(".>"         #XE993)
		(".~"         #XE994)
		(".="         #XE995)
		("/*"         #XE9A0)
		("//"         #XE9A1)
		("/>"         #XE9A2)
		("/="         #XE9A3)
		("/=="        #XE9A4)
		("///"        #XE9A5)
		("/**"        #XE9A6)
		(":::"        #XE9AF)
		("::"         #XE9B0)
		(":="         #XE9B1)
		(":≡"         #XE9B2)
		(":>"         #XE9B3)
		(":=>"        #XE9B4)
		(":("         #XE9B5)
		(":-("        #XE9B6)
		(":)"         #XE9B7)
		(":-)"        #XE9B8)
		(":/"         #XE9B9)
		(":\\"        #XE9BA)
		(":3"         #XE9BB)
		(":D"         #XE9BC)
		(":P"         #XE9BD)
		(":>:"        #XE9BE)
		(":<:"        #XE9BF)
		("<$>"        #XE9C0)
		("<*"         #XE9C1)
		("<*>"        #XE9C2)
		("<+>"        #XE9C3)
		("<-"         #XE9C4)
		("<<"         #XE9C5)
		("<<<"        #XE9C6)
		("<<="        #XE9C7)
		("<="         #XE9C8)
		("<=>"        #XE9C9)
		("<>"         #XE9CA)
		("<|>"        #XE9CB)
		("<<-"        #XE9CC)
		("<|"         #XE9CD)
		("<=<"        #XE9CE)
		("<~"         #XE9CF)
		("<~~"        #XE9D0)
		("<<~"        #XE9D1)
		("<$"         #XE9D2)
		("<+"         #XE9D3)
		("<!>"        #XE9D4)
		("<@>"        #XE9D5)
		("<#>"        #XE9D6)
		("<%>"        #XE9D7)
		("<^>"        #XE9D8)
		("<&>"        #XE9D9)
		("<?>"        #XE9DA)
		("<.>"        #XE9DB)
		("</>"        #XE9DC)
		("<\\>"       #XE9DD)
		("<\">"       #XE9DE)
		("<:>"        #XE9DF)
		("<~>"        #XE9E0)
		("<**>"       #XE9E1)
		("<<^"        #XE9E2)
		("<!"         #XE9E3)
		("<@"         #XE9E4)
		("<#"         #XE9E5)
		("<%"         #XE9E6)
		("<^"         #XE9E7)
		("<&"         #XE9E8)
		("<?"         #XE9E9)
		("<."         #XE9EA)
		("</"         #XE9EB)
		("<\\"        #XE9EC)
		("<\""        #XE9ED)
		("<:"         #XE9EE)
		("<->"        #XE9EF)
		("<!--"       #XE9F0)
		("<--"        #XE9F1)
		("<~<"        #XE9F2)
		("<==>"       #XE9F3)
		("<|-"        #XE9F4)
		("<<|"        #XE9F5)
		("<-<"        #XE9F7)
		("<-->"       #XE9F8)
		("<<=="       #XE9F9)
		("<=="        #XE9FA)
		("=<<"        #XEA00)
		("=="         #XEA01)
		("==="        #XEA02)
		("==>"        #XEA03)
		("=>"         #XEA04)
		("=~"         #XEA05)
		("=>>"        #XEA06)
		("=/="        #XEA07)
		("=~="        #XEA08)
		("==>>"       #XEA09)
		("≡≡"         #XEA10)
		("≡≡≡"        #XEA11)
		("≡:≡"        #XEA12)
		(">-"         #XEA20)
		(">="         #XEA21)
		(">>"         #XEA22)
		(">>-"        #XEA23)
		(">>="        #XEA24)
		(">>>"        #XEA25)
		(">=>"        #XEA26)
		(">>^"        #XEA27)
		(">>|"        #XEA28)
		(">!="        #XEA29)
		(">->"        #XEA2A)
		("??"         #XEA40)
		("?~"         #XEA41)
		("?="         #XEA42)
		("?>"         #XEA43)
		("???"        #XEA44)
		("?."         #XEA45)
		("^="         #XEA48)
		("^."         #XEA49)
		("^?"         #XEA4A)
		("^.."        #XEA4B)
		("^<<"        #XEA4C)
		("^>>"        #XEA4D)
		("^>"         #XEA4E)
		("\\\\"       #XEA50)
		("\\>"        #XEA51)
		("\\/-"       #XEA52)
		("@>"         #XEA57)
		("|="         #XEA60)
		("||"         #XEA61)
		("|>"         #XEA62)
		("|||"        #XEA63)
		("|+|"        #XEA64)
		("|->"        #XEA65)
		("|-->"       #XEA66)
		("|=>"        #XEA67)
		("|==>"       #XEA68)
		("|>-"        #XEA69)
		("|<<"        #XEA6A)
		("||>"        #XEA6B)
		("|>>"        #XEA6C)
		("|-"         #XEA6D)
		("||-"        #XEA6E)
		("~="         #XEA70)
		("~>"         #XEA71)
		("~~>"        #XEA72)
		("~>>"        #XEA73)
		("[["         #XEA80)
		("]]"         #XEA81)
		("\">"        #XEA90)
		("_|_"        #XEA97)
		)))

    (defun add-pragmatapro-prettify-symbols-alist ()
      (setq prettify-symbols-alist pragmatapro-prettify-symbols-alist))

    ;; enable prettified symbols on comments
    (defun setup-compose-predicate ()
      (setq prettify-symbols-compose-predicate
	    (defun my-prettify-symbols-default-compose-p (start end _match)
	      "Same as `prettify-symbols-default-compose-p', except compose symbols in comments as well."
	      (let* ((syntaxes-beg (if (memq (char-syntax (char-after start)) '(?w ?_))
				       '(?w ?_) '(?. ?\\)))
		     (syntaxes-end (if (memq (char-syntax (char-before end)) '(?w ?_))
				       '(?w ?_) '(?. ?\\))))
		(not (or (memq (char-syntax (or (char-before start) ?\s)) syntaxes-beg)
			 (memq (char-syntax (or (char-after end) ?\s)) syntaxes-end)
			 (nth 3 (syntax-ppss))))))))

    ;; main hook fn, just add to text-mode/prog-mode
    (defun prettify-hook ()
      (add-pragmatapro-prettify-symbols-alist)
      (setup-compose-predicate))

    (add-hook 'prog-mode-hook #'prettify-hook)

    (global-prettify-symbols-mode +1)
  #+end_src
* FRAME POSITIONING
  #+begin_src emacs-lisp
    (defun set-initial-frame ()
      "Defines and center the frame window"
      (let* ((base-factor 0.72)
	     (a-width (* (display-pixel-width) base-factor))
	     (a-height (* (display-pixel-height) base-factor))
	     (a-left (truncate (/ (- (display-pixel-width) a-width) 2)))
	     (a-top (truncate (/ (- (display-pixel-height) a-height) 2))))
	(set-frame-position (selected-frame) a-left a-top)
	(set-frame-size (selected-frame) (truncate a-width) (truncate a-height) t)))

    (setq frame-resize-pixelwise t)
    (set-initial-frame)
  #+end_src
* MAC CONFIGS
  #+begin_src emacs-lisp
    ;; enable transparent titlebar with dark-mode
    (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
    (add-to-list 'default-frame-alist '(ns-appearance . dark))
#+end_src
* UX CLEANUP
  #+begin_src emacs-lisp
    ;; disable backup
    (setq make-backup-files nil)

    ;; Don't make new frames when opening a new file with Emacs
    (setq ns-pop-up-frames nil)

    ;; define alias to answering just 'y' or 'n' instead
    (defalias 'yes-or-no-p 'y-or-n-p)

    ;; Highlight the current line
    (global-hl-line-mode t)

    ;; nice scrolling
    (setq scroll-margin 0
	  scroll-conservatively 100000
	  scroll-preserve-screen-position t)

    ;; make buffer name unique with style
    (setq uniquify-buffer-name-style 'reverse
	  uniquify-separator "|"
	  uniquify-after-kill-buffer-p t
	  uniquify-ignore-buffers-re "^\\*")
  #+end_src
* GLOBAL BINDINGS
#+begin_src emacs-lisp
  ;; dependable keybindings
  (global-set-key (kbd "C-c l") #'goto-line)
  (global-set-key (kbd "\C-c n") #'rename-buffer)
  (global-set-key (kbd "C-c w") #'whitespace-mode)
  (global-set-key (kbd "<C-s-return>") #'toggle-frame-fullscreen)
#+end_src
* PACKAGE MANAGER
  #+begin_src emacs-lisp
    (require 'package)
    (setq package-check-signature nil)
    (setq package-enable-at-startup nil)
    (add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
    (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/"))
    (package-initialize)

    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))
  #+end_src
* THEMING
  #+begin_src emacs-lisp
    (use-package doom-themes
      :ensure t
      :config
      (setq doom-themes-enable-bold nil
	    doom-themes-enable-italic nil)
      (load-theme 'doom-city-lights t)
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

    (use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode))

    (use-package winum
      :ensure t
      :config (winum-mode))

    (use-package all-the-icons
      :ensure t
      :config (setq inhibit-compacting-font-caches t))
  #+end_src
* OTHER DEFAULTS
   #+begin_src emacs-lisp
	  ;; default directory for dire-mode
	  (setq default-directory "~/")

	  ;; don't backup please. I got this
	  (setq make-backup-files nil)

	  ;; disable recentf
	  (recentf-mode nil)

	  ;; activate column-number-mode
	  (column-number-mode t)
	  (setq-default indicate-buffer-boundaries 'right)

	  ;; delete marked region with 'DEL' key or backspace
	  (delete-selection-mode t)

	  ;; define abbrev file
	  (setq abbrev-file-name (expand-file-name "abbrev.el" user-emacs-directory))
	  (unless (file-exists-p abbrev-file-name)
	    (write-region "" "" abbrev-file-name))

	  ;; supress some warning
	  (setq ad-redefinition-action 'accept)
   #+end_src
* CURSOR STYLING
#+begin_src emacs-lisp
  (setq-default cursor-type '(bar . 1)
	  blink-cursor-delay 0
	  blink-cursor-interval 0.4)

  ;; flashes the cursor's line switched buffer
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t)
    (setq beacon-color "#0057FF"))
#+end_src
* FLYCHECK
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :hook ((prog-mode . flycheck-mode))
      :config
      (setq flycheck-highlighting-mode 'lines))
  #+end_src
* WHICH-KEY
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :custom
      (which-key-separator " ")
      (which-key-prefix-prefix "+")
      :config (which-key-mode t))
  #+end_src
* COUNSEL
  #+begin_src emacs-lisp
    (use-package amx :ensure t)
    (use-package flx :ensure t)

    (use-package counsel
      :ensure t
      :config
      (ivy-mode t)
      (setq ivy-use-virtual-buffers t
	    ivy-initial-inputs-alist nil
	    enable-recursive-minibuffers t
	    search-default-mode #'char-fold-to-regexp
	    ivy-re-builders-alist
	    '((ivy-switch-buffer . ivy--regex-plus)
	      (t . ivy--regex-fuzzy)))
      :bind (("C-s" . counsel-grep-or-swiper)
	     ("M-x" . counsel-M-x)
	     ("C-x C-m" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file)))

    (use-package avy-flycheck
      :ensure t
      :config
      (global-set-key (kbd "C-'") #'avy-flycheck-goto-error))

    (use-package all-the-icons-ivy
      :ensure t
      :config (all-the-icons-ivy-setup))
  #+end_src
* PROJECTILE
  #+begin_src emacs-lisp
    (use-package projectile
      :ensure t
      :config (projectile-mode t))

    (use-package counsel-projectile
      :ensure t
      :config
      (counsel-projectile-mode)
      (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map))
  #+end_src
* COMPANY
  #+begin_src emacs-lisp
    (use-package company
      :ensure t
      :config
      (global-company-mode t)
      (setq company-tooltip-limit 10
	    company-dabbrev-downcase 0
	    company-idle-delay 0
	    company-echo-delay 0
	    company-minimum-prefix-length 1
	    company-require-match nil
	    company-selection-wrap-around t
	    company-tooltip-align-annotations t
	    company-global-modes '(not eshell-mode))
      (define-key company-active-map (kbd "M-n") nil)
      (define-key company-active-map (kbd "M-p") nil)
      (define-key company-active-map (kbd "C-n") 'company-select-next)
      (define-key company-active-map (kbd "C-p") 'company-select-previous)
      (define-key company-active-map (kbd "TAB") 'company-complete)
      (define-key company-active-map (kbd "<tab>") 'company-complete))

    (use-package company-flx
      :ensure t
      :config (company-flx-mode t))
  #+end_src
* ORG
  #+begin_src emacs-lisp
    (use-package org
     :ensure org-plus-contrib
     :config (setq
	      org-src-fontify-natively t
	      org-src-tab-acts-natively t
	      org-todo-keywords '((sequence "BACKLOG(b)" "TODO(t)" "DOING(n)" "|" "DONE(d)")
				  (sequence "|"  "ONHOLD(h)" "CANCELED(c)"))
	      org-agenda-files '("~/.org/agenda.org")))


    (use-package restclient
      :ensure t
      :config (add-hook 'restclient-mode-hook 'company-restclient))

    (use-package company-restclient
      :ensure t
      :config
      (progn
	(add-hook 'restclient-mode-hook
		  (lambda ()
		    (set (make-local-variable 'company-backends)'(company-restclient))
		    (company-mode t)))))

    (use-package ob-restclient
      :ensure t
      :config 
      (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))

  #+end_src
* LSP
  #+begin_src emacs-lisp
    (use-package lsp-mode
      :ensure t
      :hook (
	     (sh-mode . lsp)
	     (python-mode . lsp)
	     (dart-mode . lsp)
	     (js2-mode . lsp))
      :config
      ;; (add-hook 'python-mode-hook #'lsp)
      ;; (add-hook 'dart-mode-hook #'lsp)
      ;; (add-hook 'js2-mode-hook #'lsp)
      (setq lsp-prefer-flymake nil
	    lsp-dart-analysis-sdk-dir "/usr/local/opt/flutter/bin/cache/dart-sdk/"
	    lsp-enable-on-type-formatting nil
	    lsp-log-max 100000))

    (use-package lsp-ui
      :ensure t
      :requires lsp-mode flycheck
      :config
      (setq lsp-ui-sideline-enable t
	    lsp-ui-sideline-show-symbol nil)
      :hook (lsp-mode . lsp-ui-mode))

    (use-package company-lsp
      :ensure t
      :requires company
      :config
      (push 'company-lsp company-backends)
      (setq company-transformers nil
	    company-lsp-async t
	    company-lsp-cache-candidates 'auto
	    company-lsp-filter-candidates t))

    (use-package yasnippet
      :ensure t
      :diminish yas-minor-mode
      :config
      (use-package yasnippet-snippets :ensure t)
      (yas-global-mode t))
  #+end_src
* LANGUAGE UTILS
  #+begin_src emacs-lisp
    (use-package smartparens
      :ensure t
      :config (progn (show-smartparens-global-mode t))
      :hook (prog-mode . turn-on-smartparens-mode))

    (use-package rainbow-delimiters
      :ensure t
      :hook (prog-mode . rainbow-delimiters-mode))

    (use-package highlight-indent-guides
      :ensure t
      :hook (prog-mode . highlight-indent-guides-mode)
      :custom
      (highlight-indent-guides-character ?\│)
      (highlight-indent-guides-auto-odd-face-perc 2)
      (highlight-indent-guides-auto-even-face-perc 2)
      (highlight-indent-guides-auto-character-face-perc 8)
      (highlight-indent-guides-method 'character)
      (highlight-indent-guides-responsive 'character)
      (highlight-indent-guides-delay 0))
  #+end_src
* LANGUAGES
** CLOJURE
   #+begin_src emacs-lisp
     (use-package clojure-mode
       :ensure t
       :config (yas-global-mode t))

     (use-package flycheck-joker
       :ensure t)

     (use-package lsp-mode
       :ensure t
       :commands lsp
       :config
       (add-to-list 'lsp-language-id-configuration '(clojure-mode . "clojure-mode"))
       (add-to-list 'lsp-language-id-configuration '(clojurescript-mode . "clojure-mode"))
       :init
       (setq lsp-enable-indentation nil)
       (add-hook 'clojure-mode-hook #'lsp)
       (add-hook 'clojurec-mode-hook #'lsp)
       (add-hook 'clojurescript-mode-hook #'lsp))
   #+end_src
** PYTHON
   #+begin_src emacs-lisp
     (use-package lsp-python-ms
       :ensure t
       :config
       (add-to-list 'lsp-language-id-configuration '(python-mode . "python"))
       :hook (python-mode . (lambda () (require 'lsp-python-ms) (lsp))))

     ;; (use-package pyenv-mode :ensure t)

     ;; (use-package pyenv-mode-auto :ensure t)

     ;; (use-package blacken
     ;; :after python
     ;; :hook (python-mode . blacken-mode))
   #+end_src
** DART
   #+begin_src emacs-lisp
     (defun flutter-lsp-save ()
       "Upgrade save in flutter to do formatting and hot-reload"
       (interactive)
       (lsp-format-buffer)
       (save-buffer)
       (flutter-run-or-hot-reload))

     (use-package dart-mode
       :ensure t
       :config
       (add-to-list 'lsp-language-id-configuration '(dart-mode . "dart"))
       (with-eval-after-load "projectile"
	 (add-to-list 'projectile-project-root-files-bottom-up "pubspec.yaml")
	 (add-to-list 'projectile-project-root-files-bottom-up "build")))

     (use-package flutter
       :ensure t
       :after dart-mode
       :bind (:map dart-mode-map ("C-x C-s" . #'flutter-lsp-save)))
   #+end_src
** LUA
   #+begin_src emacs-lisp
     (use-package lua-mode
       :ensure t)
   #+end_src
** GROOVY
   #+begin_src emacs-lisp
  (use-package groovy-mode
    :ensure t
    :mode "\\.groovy\\'\\|\\.gradle\\'")
   #+end_src

** RUST
   #+begin_src emacs-lisp
     (use-package toml-mode
       :ensure t)

     (use-package rust-mode
       :ensure t
       :init
       (setq rust-format-on-save t)
       :hook (rust-mode . lsp))

     (use-package cargo
       :ensure t
       :hook (rust-mode . cargo-minor-mode))

     (use-package flycheck-rust
       :ensure t
       :after (rust-mode)
       :hook ((flycheck-mode . flycheck-rust-setup)))
   #+end_src
** JAVASCRIPT
   #+begin_src emacs-lisp
     (use-package json-mode
       :ensure t
       :mode (("\\.json\\'" . json-mode)
	      ("\\.tmpl\\'" . json-mode)
	      ("\\.eslintrc\\'" . json-mode))
       :config (setq-default js-indent-level 2))

     (use-package json-reformat
       :ensure t
       :after json-mode
       :bind (("C-c r" . json-reformat-region)))

     (use-package js2-mode 
       :ensure t
       :mode "\\.js\\'"
       :config (setq js-indent-level 2)
       :hook (js2-mode . lsp))

     (use-package prettier-js
       :ensure t
       :init (add-hook 'js2-mode-hook 'prettier-js-mode))
   #+end_src
* CLI CLIENTS
** GIT
   #+begin_src emacs-lisp
     (use-package magit
       :ensure t
       :init (magit-auto-revert-mode -1)
       :bind ("C-x g" . magit-status))

     (if (display-graphic-p)
	 (use-package git-gutter-fringe
	   :ensure t
	   :init (global-git-gutter-mode))
       (use-package git-gutter
	 :ensure t
	 :init (global-git-gutter-mode)))
#+end_src
** DOCKER
#+begin_src emacs-lisp
  (use-package dockerfile-mode :ensure t)
  (use-package docker-compose-mode :ensure t)
  (use-package docker-tramp :ensure t)
#+end_src

* ESHELL
  #+begin_src emacs-lisp
    (setenv "PAGER" "cat")

    (use-package shrink-path
      :ensure t)

    (use-package esh-autosuggest
      :ensure t
      :hook (eshell-mode . esh-autosuggest-mode))

    (use-package exec-path-from-shell
      :ensure t
      :if (memq window-system '(mac ns))
      :config
      (exec-path-from-shell-initialize)
      (exec-path-from-shell-copy-env "LANG")
      (exec-path-from-shell-copy-env "LC_CTYPE")
      (exec-path-from-shell-copy-env "LC_NUMERIC")
      (exec-path-from-shell-copy-env "LC_ALL")
      (exec-path-from-shell-copy-env "HOME")
      (exec-path-from-shell-copy-env "PERSONAL_ACCESS_TOKEN"))

    (use-package eshell
      :config
      (setq
       eshell-banner-message "...\n"
       eshell-hist-ignoredups t
       eshell-error-if-no-glob t
       eshell-cmpl-ignore-case t
       eshell-save-history-on-exit t
       eshell-history-size 1024
       eshell-prefer-lisp-functions nil
       eshell-destroy-buffer-when-process-dies t
       eshell-scroll-to-bottom-on-input 'all))

    (use-package eshell-fringe-status
      :config
      (add-hook 'eshell-mode-hook 'eshell-fringe-status-mode))

    (defun git-get-current-branch ()
      "Get git branch in the current directory."
      (when (and (eshell-search-path "git") (locate-dominating-file (eshell/pwd) ".git"))
	(s-trim (shell-command-to-string (concat "git rev-parse --abbrev-ref HEAD")))))

    (defun display-git-prompt-branch ()
      "Displays the git in the prompt."
      (if (not (null (git-get-current-branch))) (concat "￨" (git-get-current-branch)) ""))


    (defun get-first-char (str)
      "Get first character of string STR."
      (if (zerop (length str)) "" (substring str 0 1)))

    (defun fill-window-with-char ()
      "Fill the window width with one character acting as a line."
      (make-string (window-body-width) ?_))

    (defun pwd-shorten-dirs (pwd)
      "Shorten all directory names in PWD except the last two."
      (let ((path-items (split-string pwd "/")))
	(if (> (length path-items) 2)
	    (concat
	     (mapconcat 'get-first-char (butlast path-items 2) "/")
	     "/"
	     (mapconcat (lambda (item) item) (last path-items 2) "/"))
	  pwd)))

    (setq eshell-prompt-function
	  (lambda nil
	    (concat
	     (propertize "\n" 'face nil)
	     (propertize "\n" 'face '(:background "#181F25"))
	     (propertize "╭⟢" 'face '(:foreground "#A2DEB2"))
	     (propertize " " 'face nil)
	     (propertize (user-login-name) 'face '(:foreground "#5DC078"))
	     (propertize "@" 'face '(:foreground "#0057FF"))
	     (propertize (system-name) 'face '(:foreground "#0083FF"))
	     (propertize " ⯌ " 'face nil)
	     (propertize "￨" 'face '(:foreground "#74CAFF"))
	     (propertize (pwd-shorten-dirs (abbreviate-file-name (eshell/pwd)))
			 'face '(:foreground "#74CAFF"))
	     (propertize " ⯌ " 'face nil)
	     (propertize (display-git-prompt-branch) 'face '(:foreground "#A2DEB2"))
	     (propertize "\n" 'face nil)
	     (propertize "╰🡢" 'face '(:foreground "#A2DEB2"))
	     (propertize " " 'face nil))))

    (setq eshell-highlight-prompt nil)

    ;; handle visual
    ;; (require 'em-term)
    ;; (add-to-list `eshell-visual-commands "top")
    ;; (add-to-list `eshell-visual-subcommands '("git" ("log" "diff")))
    ;; (add-to-list `eshell-visual-options '("git" "--help"))

    ;; Set this to match eshell-prompt-function
    (setq eshell-prompt-regexp "^╰🡢 ")

    ;; define portable aliases
    (setq eshell-command-aliases-list ())

    (defun +alias (al cmd)
      "Handy wrapper function to convert alias symbols.
    to alias strings to avoid writing 4 quotes per alias.
    AL is a single-word symbol naming the alias, CMD is a list symbol describing the command."
      (add-to-list 'eshell-command-aliases-list
		   (list (symbol-name al)
			 (mapconcat 'symbol-name cmd " "))))

    ;; actual aliases
    (+alias 'l      '(ls -laF))
    (+alias 'll     '(ls -l))
    (+alias 'la     '(ls -a))
    (+alias 'lt     '(ls -ltr $*))
    (+alias '..     '(cd ..))
    (+alias '...    '(cd ../..))
    (+alias '....   '(cd ../../..))
    (+alias '.....  '(cd ../../../..))
    (+alias 'md     '(mkdir -p))
    (+alias 'emacs  '(find-file $1))
    (+alias 'less   '(find-file-read-only $1))

    ;; Docker
    (+alias 'd '(docker $*))
    (+alias 'dc '(docker-compose $*))
    (+alias 'dm '(docker-machine $*))

    ;; Clojure
    (+alias 'clj '(clojure $*))

    (+alias 'clear '(eshell/clear-scrollback))

    ;; HTTPie
    (+alias 'https '(http --default-scheme=https $*))
  #+end_src
* CUSTOM.EL CONFIG FILE
  #+begin_src emacs-lisp
    (add-hook
     'after-init-hook
     (lambda ()
       (let ((custom-file
	      (expand-file-name "custom.el" user-emacs-directory)))
	 (unless (file-exists-p custom-file)
	   (write-region "" "" custom-file))
	 (load custom-file))))
  #+end_src
* REDUCE GARBAGE COLLECTION
  #+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 16 1000 1000))
  #+end_src

* COMMENT LOCAL VARIABLES
# local variables:
# eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t)
# end:
