#+PROPERTY: header-args :tangle yes :comments yes :results silent

* DONE SANE DEFAULTS
** DONE Better defaults
#+begin_src emacs-lisp
  ;; remove default menu bar
  (menu-bar-mode -1)

  ;; disable backup
  (setq make-backup-files nil)

  ;; disable these GUI based behaviors
  (when window-system
    (scroll-bar-mode -1)
    (tool-bar-mode -1)
    (tooltip-mode -1))

  ;; delete selected text on-type
  (delete-selection-mode t)

  ;; disable and customize startup message
  (setq inhibit-startup-message t
	initial-scratch-message ";; Happy Hacking\n")

  ;; make identical buffer names unique
  (setq uniquify-buffer-name-style 'reverse
	uniquify-separator "|"
	uniquify-after-kill-buffer-p t
	uniquify-ignore-buffers-re "^\\*")

  ;; use a different file for custom configurations
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
    (load custom-file)

  ;; define alias to answering just 'y' or 'n' instead
  (defalias 'yes-or-no-p 'y-or-n-p)  
#+end_src
** DONE Bindings
#+begin_src emacs-lisp
  ;; dependable keybindings
  (global-set-key (kbd "C-c l") #'goto-line)
  (global-set-key (kbd "\C-c n") #'rename-buffer)
  (global-set-key (kbd "<C-s-return>") #'toggle-frame-fullscreen)
#+end_src

* DONE MAC CONFIGURATION
#+begin_src emacs-lisp
  ;; Don't make new frames when opening a new file with Emacs
  (setq ns-pop-up-frames nil)

  ;; enable transparent titlebar with dark-mode
  (add-to-list 'default-frame-alist '(ns-transparent-titlebar . t))
  (add-to-list 'default-frame-alist '(ns-appearance . dark))
  (setq ns-use-proxy-icon  nil
	frame-title-format nil)
#+end_src
* DONE PACKAGE MANAGEMENT
** DONE Adding more package-archives and Install use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("gnu" . "http://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* DONE APPEARANCE
** TODO Font & text rendering
#+begin_src emacs-lisp
  (defun watchwords ()
    "Convert words mentioned below into keywords."
    (font-lock-add-keywords
     nil '(("\\<\\(FIXIT\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\|NOCOMMIT\\)"
	    1 font-lock-warning-face t))))

  (add-hook 'prog-mode-hook 'watchwords)

  (setq prettify-symbols-unprettify-at-point 'right-edge)

  (defconst pragmatapro-prettify-symbols-alist
    (mapcar (lambda (s)
	      `(,(car s)
		.
		,(vconcat
		  (apply 'vconcat
			 (make-list
			  (- (length (car s)) 1)
			  (vector (decode-char 'ucs #X0020) '(Br . Bl))))
		  (vector (decode-char 'ucs (cadr s))))))
	    '(("[ERROR]"   #XE380)
	      ("[DEBUG]"   #XE381)
	      ("[INFO]"    #XE382)
	      ("[WARN]"    #XE383)
	      ("[WARNING]" #XE384)
	      ("[ERR]"     #XE385)
	      ("[FATAL]"   #XE386)
	      ("[TRACE]"   #XE387)
	      ("[FIXME]"   #XE388)
	      ("[TODO]"    #XE389)
	      ("[BUG]"     #XE38A)
	      ("[NOTE]"    #XE38B)
	      ("[HACK]"    #XE38C)
	      ("[MARK]"    #XE38D)
	      ("!!"        #XE900)
	      ("!="        #XE901)
	      ("!=="       #XE902)
	      ("!!!"       #XE903)
	      ("!≡"        #XE904)
	      ("!≡≡"       #XE905)
	      ("!>"        #XE906)
	      ("!=<"       #XE907)
	      ("#("        #XE920)
	      ("#_"        #XE921)
	      ("#{"        #XE922)
	      ("#?"        #XE923)
	      ("#>"        #XE924)
	      ("##"        #XE925)
	      ("#_("       #XE926)
	      ("%="        #XE930)
	      ("%>"        #XE931)
	      ("%>%"       #XE932)
	      ("%<%"       #XE933)
	      ("&%"        #XE940)
	      ("&&"        #XE941)
	      ("&*"        #XE942)
	      ("&+"        #XE943)
	      ("&-"        #XE944)
	      ("&/"        #XE945)
	      ("&="        #XE946)
	      ("&&&"       #XE947)
	      ("&>"        #XE948)
	      ("$>"        #XE955)
	      ("***"       #XE960)
	      ("*="        #XE961)
	      ("*/"        #XE962)
	      ("*>"        #XE963)
	      ("++"        #XE970)
	      ("+++"       #XE971)
	      ("+="        #XE972)
	      ("+>"        #XE973)
	      ("++="       #XE974)
	      ("--"        #XE980)
	      ("-<"        #XE981)
	      ("-<<"       #XE982)
	      ("-="        #XE983)
	      ("->"        #XE984)
	      ("->>"       #XE985)
	      ("---"       #XE986)
	      ("-->"       #XE987)
	      ("-+-"       #XE988)
	      ("-\\/"      #XE989)
	      ("-|>"       #XE98A)
	      ("-<|"       #XE98B)
	      (".."        #XE990)
	      ("..."       #XE991)
	      ("..<"       #XE992)
	      (".>"        #XE993)
	      (".~"        #XE994)
	      (".="        #XE995)
	      ("/*"        #XE9A0)
	      ("//"        #XE9A1)
	      ("/>"        #XE9A2)
	      ("/="        #XE9A3)
	      ("/=="       #XE9A4)
	      ("///"       #XE9A5)
	      ("/**"       #XE9A6)
	      (":::"       #XE9AF)
	      ("::"        #XE9B0)
	      (":="        #XE9B1)
	      (":≡"        #XE9B2)
	      (":>"        #XE9B3)
	      (":=>"       #XE9B4)
	      (":("        #XE9B5)
	      (":-("       #XE9B6)
	      (":)"        #XE9B7)
	      (":-)"       #XE9B8)
	      (":/"        #XE9B9)
	      (":\\"       #XE9BA)
	      (":3"        #XE9BB)
	      (":D"        #XE9BC)
	      (":P"        #XE9BD)
	      (":>:"       #XE9BE)
	      (":<:"       #XE9BF)
	      ("<$>"       #XE9C0)
	      ("<*"        #XE9C1)
	      ("<*>"       #XE9C2)
	      ("<+>"       #XE9C3)
	      ("<-"        #XE9C4)
	      ("<<"        #XE9C5)
	      ("<<<"       #XE9C6)
	      ("<<="       #XE9C7)
	      ("<="        #XE9C8)
	      ("<=>"       #XE9C9)
	      ("<>"        #XE9CA)
	      ("<|>"       #XE9CB)
	      ("<<-"       #XE9CC)
	      ("<|"        #XE9CD)
	      ("<=<"       #XE9CE)
	      ("<~"        #XE9CF)
	      ("<~~"       #XE9D0)
	      ("<<~"       #XE9D1)
	      ("<$"        #XE9D2)
	      ("<+"        #XE9D3)
	      ("<!>"       #XE9D4)
	      ("<@>"       #XE9D5)
	      ("<#>"       #XE9D6)
	      ("<%>"       #XE9D7)
	      ("<^>"       #XE9D8)
	      ("<&>"       #XE9D9)
	      ("<?>"       #XE9DA)
	      ("<.>"       #XE9DB)
	      ("</>"       #XE9DC)
	      ("<\\>"      #XE9DD)
	      ("<\">"      #XE9DE)
	      ("<:>"       #XE9DF)
	      ("<~>"       #XE9E0)
	      ("<**>"      #XE9E1)
	      ("<<^"       #XE9E2)
	      ("<!"        #XE9E3)
	      ("<@"        #XE9E4)
	      ("<#"        #XE9E5)
	      ("<%"        #XE9E6)
	      ("<^"        #XE9E7)
	      ("<&"        #XE9E8)
	      ("<?"        #XE9E9)
	      ("<."        #XE9EA)
	      ("</"        #XE9EB)
	      ("<\\"       #XE9EC)
	      ("<\""       #XE9ED)
	      ("<:"        #XE9EE)
	      ("<->"       #XE9EF)
	      ("<!--"      #XE9F0)
	      ("<--"       #XE9F1)
	      ("<~<"       #XE9F2)
	      ("<==>"      #XE9F3)
	      ("<|-"       #XE9F4)
	      ("<<|"       #XE9F5)
	      ("==<"       #XEA00)
	      ("=="        #XEA01)
	      ("==="       #XEA02)
	      ("==>"       #XEA03)
	      ("=>"        #XEA04)
	      ("=~"        #XEA05)
	      ("=>>"       #XEA06)
	      ("=/="       #XEA07)
	      ("≡≡"        #XEA10)
	      ("≡≡≡"       #XEA11)
	      ("≡:≡"       #XEA12)
	      (">-"        #XEA20)
	      (">="        #XEA21)
	      (">>"        #XEA22)
	      (">>-"       #XEA23)
	      (">=="       #XEA24)
	      (">>>"       #XEA25)
	      (">=>"       #XEA26)
	      (">>^"       #XEA27)
	      (">>|"       #XEA28)
	      (">!="       #XEA29)
	      ("??"        #XEA40)
	      ("?~"        #XEA41)
	      ("?="        #XEA42)
	      ("?>"        #XEA43)
	      ("???"       #XEA44)
	      ("?."        #XEA45)
	      ("^="        #XEA48)
	      ("^."        #XEA49)
	      ("^?"        #XEA4A)
	      ("^.."       #XEA4B)
	      ("^<<"       #XEA4C)
	      ("^>>"       #XEA4D)
	      ("^>"        #XEA4E)
	      ("\\\\"      #XEA50)
	      ("\\>"       #XEA51)
	      ("\\/-"      #XEA52)
	      ("@>"        #XEA57)
	      ("|="        #XEA60)
	      ("||"        #XEA61)
	      ("|>"        #XEA62)
	      ("|||"       #XEA63)
	      ("|+|"       #XEA64)
	      ("|->"       #XEA65)
	      ("|-->"      #XEA66)
	      ("|=>"       #XEA67)
	      ("|==>"      #XEA68)
	      ("|>-"       #XEA69)
	      ("|<<"       #XEA6A)
	      ("||>"       #XEA6B)
	      ("|>>"       #XEA6C)
	      ("~="        #XEA70)
	      ("~>"        #XEA71)
	      ("~~>"       #XEA72)
	      ("~>>"       #XEA73)
	      ("[["        #XEA80)
	      ("]]"        #XEA81)
	      ("\">"       #XEA90)
	      )))

  (defun add-pragmatapro-prettify-symbols-alist ()
    (dolist (alias pragmatapro-prettify-symbols-alist)
      (push alias prettify-symbols-alist)))

  (add-hook 'prog-mode-hook #'add-pragmatapro-prettify-symbols-alist)

  (global-prettify-symbols-mode t)
#+end_src
** DONE Visual & Theme
#+begin_src emacs-lisp
  ;; define the font family and size
  (set-frame-font "Pragmatapro 15" nil t)
  (setq-default line-spacing 5)
  (global-hl-line-mode t)

  ;; Using ~M-x all-the-icons-fonts~ you can install the fonts
  (use-package all-the-icons
    :ensure t
    :config (setq inhibit-compacting-font-caches t))

  (use-package doom-themes
    :ensure t
    :init (load-theme 'doom-one t)
    :config
    (doom-themes-visual-bell-config)
    (doom-themes-org-config))

  (use-package doom-modeline
    :ensure t
    :defer t
    :hook (after-init . doom-modeline-init))
#+end_src
** DONE Cursor styling
#+begin_src emacs-lisp
  (setq-default cursor-type '(bar . 1) blink-cursor-delay 0 blink-cursor-interval 0.4)

  ;; flashes the cursor's line when you scroll
  (use-package beacon
    :ensure t
    :config
    (beacon-mode t)
    (setq beacon-color "#0057FF"))
#+end_src
** DONE Environment variables
 #+BEGIN_SRC emacs-lisp
   (defun exec-envvars-from-file (file &optional ignore-env)
     (with-temp-buffer
       (insert-file-contents file)
       (remove nil
	 (mapcar
	  (lambda (x)
	    (if (string-prefix-p "# " x) nil
	      (let
		  ((ignore (upcase ignore-env))
		   (key-val (split-string x "=" t "\"")))
		(if (string= (car key-val) ignore)
		    nil
		  (setenv (car key-val) (cadr key-val))
		  key-val)))) (split-string (buffer-string) "\n" t "export ")))))

   ;; get all bash environment variables except PATH
   (exec-envvars-from-file "~/build/dotfiles/bash/env" "PATH")

   (use-package exec-path-from-shell
     :if (memq window-system '(mac ns))
     :ensure t
     :config
     (exec-path-from-shell-initialize))
 #+END_SRC
* TODO LINTING/SPELLING
*** DONE Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook ((prog-mode . flyspell-prog-mode)
	   (text-mode . flyspell-mode)))
#+END_SRC
*** TODO Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :hook ((prog-mode . flycheck-mode))
      :config
      (setq flycheck-python-flake8-executable "flake8")
      (setq flycheck-highlighting-mode 'lines))
#+END_SRC
*** TODO Don't complain in org-mode elisp snippets
* TODO FIGLET & OTHER UTILS
*** TODO Figlet
*** DONE Command Log mode
#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :config (global-command-log-mode)
    :bind ("C-c o" . clm/toggle-command-log-buffer))
#+END_SRC

* TODO COMPANY
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (progn 
      (setq company-idle-delay 0.2
	    company-tooltip-limit 20
	    company-minimum-prefix-length 2
	    company-echo-delay 0
	    company-dabbrev-downcase nil)
    
      (add-hook 'after-init-hook 'global-company-mode)

      (eval-after-load 'company
	`(let (( Map  company-active-map))
	   (define-key company-active-map (kbd "\C-n") 'company-select-next)
	   (define-key company-active-map (kbd "\C-n") 'company-select-next)
	   (define-key company-active-map (kbd "\C-p") 'company-select-previous)
	   (define-key company-active-map (kbd "\C-d") 'company-show-doc-buffer)
	   (define-key company-active-map (kbd "<tab>") 'company-complete)))))
#+end_src
* TODO MAJOR MODES
** TODO IVY / COUNSEL / SWIPER
#+begin_src emacs-lisp
  (use-package ivy
    :ensure t
    :init (ivy-mode t)
    :config
    (setq ivy-count-format ""
	  ivy-re-builders-alist '((t   . ivy--regex-ignore-order))
	  ivy-initial-inputs-alist nil
	  ivy-extra-directories nil
	  ivy-height 8
	  ivy-re-builders-alist
	  '((swiper . ivy--regex-plus)
	    (t      . ivy--regex-fuzzy))))

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x C-m" . counsel-M-x)))

  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper)))

  (use-package all-the-icons-ivy
    :ensure t
    :config
    (all-the-icons-ivy-setup))

  (use-package ivy-explorer
    :ensure t
    :config
    (ivy-explorer-mode t)
    (counsel-mode t))

#+end_src
** TODO ANZU
#+begin_src emacs-lisp
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode t)
    (global-set-key [remap query-replace-regexp] 'anzu-query-replace-regexp)
    (global-set-key [remap query-replace] 'anzu-query-replace))
#+end_src
** TODO WHITESPACE
#+begin_src emacs-lisp
  (use-package whitespace
    :bind ("\C-c w" . whitespace-mode))
#+end_src
** TODO PARINFER
#+begin_src emacs-lisp
  (use-package parinfer
    :ensure t
    :bind (("C-," . parinfer-toggle-mode))
    :init
    (progn
      (setq parinfer-extensions
	    '(defaults       ; should be included.
	       pretty-parens  ; different paren styles for different modes.
	       smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
	       smart-yank))   ; Yank behavior depend on mode.
      (add-hook 'clojure-mode-hook #'parinfer-mode)
      (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
      (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src
** TODO WHICH-KEY
#+begin_src emacs-lisp
  ;; Which Key
  (use-package which-key
    :ensure t
    :init
    (setq which-key-separator " ")
    (setq which-key-prefix-prefix "+")
    :config (which-key-mode))
#+end_src
** TODO TEXT-SCALING
#+begin_src emacs-lisp
  ;; font scaling
  (use-package default-text-scale
    :ensure t
    :config
    (global-set-key (kbd "C-s-=") 'default-text-scale-increase)
    (global-set-key (kbd "C-s--") 'default-text-scale-decrease))
#+end_src
** TODO ORG
*** DONE Get the newest version of org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :pin org
    :ensure org-plus-contrib
    :config (setq
	     org-src-fontify-natively t
	     org-src-tab-acts-natively t
	     org-todo-keywords '((sequence "BACKLOG(b)" "TODO(t)" "DOING(n)" "|" "DONE(d)")
				 (sequence "|"  "ONHOLD(h)" "CANCELED(c)"))
	     org-agenda-files '("~/.org/agenda.org")))
#+END_SRC
** TODO REST-CLIENT
#+begin_src emacs-lisp
  (use-package restclient-mode
    :defer 5
    :config (add-hook 'restclient-mode-hook 'company-restclient))

  (use-package company-restclient
    :ensure t
    :config
    (progn
      (add-hook 'restclient-mode-hook
		(lambda ()
		  (set (make-local-variable 'company-backends)'(company-restclient))
		  (company-mode t)))))

  (use-package ob-restclient
    :ensure t
    :config 
    (org-babel-do-load-languages 'org-babel-load-languages '((restclient . t))))
#+end_src
** DONE MAGIT
*** Installing Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status)
    :bind ("C-x g" . magit-status))
#+END_SRC
** TODO GITGUTTER
#+begin_src emacs-lisp
  (if (display-graphic-p)
      (use-package git-gutter-fringe
	:ensure t
	:init (global-git-gutter-mode))
    (use-package git-gutter
      :ensure t
      :init (global-git-gutter-mode)))
#+end_src
** TODO MARKDOWN
#+begin_src emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("\\.markdown\\'" . markdown-mode)
	   ("\\.md\\'"       . markdown-mode)))
#+end_src
** TODO JSON
#+begin_src emacs-lisp
  (use-package json-mode
    :init (setq js-indent-level 2))
#+end_src
** TODO EPUB
#+begin_src emacs-lisp
  (use-package nov
    :ensure t
    :mode ("\\.epub\\'" . nov-mode)
    :config (progn
	      (setq nov-text-width 80)
	      (setq nov-variable-pitch nil)))
#+end_src
** TODO DOCKER
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)

  (use-package docker-compose-mode
    :ensure t)

  (use-package docker-tramp
    :ensure t)
#+end_src
** TODO WEB
#+begin_src emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.js[x]?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mdx?\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  
    (setq web-mode-content-types-alist '(("jsx" . "\\.js[x]?\\'")))
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-markup-indent-offset 2))
#+end_src
** TODO RUST
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)

  (use-package cargo
    :ensure t
    :config
    (add-hook 'rust-mode-hook 'cargo-minor-mode))

  (use-package racer
    :ensure t
    :config
    (progn
      (add-hook 'rust-mode-hook #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode)
      (add-hook 'racer-mode-hook #'company-mode)))

  (use-package flycheck-rust
    :ensure t
    :config
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+end_src
** TODO PYTHON
#+begin_src emacs-lisp
  ;; enable eldoc mode for python files
  (add-hook 'python-mode-hook 'eldoc-mode)

  (use-package anaconda-mode
    :ensure t
    :config (add-hook 'python-mode-hook 'anaconda-mode))

  (use-package company-anaconda
    :ensure t
    :config
    (eval-after-load "company" '(add-to-list 'company-backends 'company-anaconda)))

  (use-package pipenv
    :ensure t
    :hook (python-mode . pipenv-mode))
#+end_src
** TODO ESHELL
#+begin_src emacs-lisp
  (use-package eshell
    :init
    (setq
     eshell-banner-message ""
     eshell-hist-ignoredups t
     eshell-error-if-no-glob t
     eshell-cmpl-ignore-case t
     eshell-save-history-on-exit t
     eshell-prefer-lisp-functions nil
     eshell-destroy-buffer-when-process-dies t
     eshell-scroll-to-bottom-on-input 'all)
    :config
    (defun eshell/clear ()
      "Clear eshell buffer"
      (interactive)
      (let ((inhibit-read-only t))
	(erase-buffer)
	(if (eshell-exit-success-p) (message ":)") (message ":(")))))

  (defun git-prompt-branch-name ()
    "Get current git branch name"
    (let ((args '("symbolic-ref" "HEAD" "--short")))
      (with-temp-buffer
	(apply #'process-file "git" nil (list t nil) nil args)
	(unless (bobp)
	  (goto-char (point-min))
	  (buffer-substring-no-properties (point) (line-end-position))))))

  ;; FIXME there should be a better way to have this done in the top function
  (defun display-git-prompt-branch ()
    (if (not (null (git-prompt-branch-name))) (concat "￨" (git-prompt-branch-name)) ""))

  (defun get-first-char (str)
    (if (zerop (length str)) "" (substring str 0 1)))

  (defun pwd-shorten-dirs (pwd)
    "Shorten all directory names in PWD except the last two."
    (let ((path-items (split-string pwd "/")))
      (if (> (length path-items) 2)
	  (concat
	   (mapconcat 'get-first-char (butlast path-items 2) "/")
	   "/"
	   (mapconcat (lambda (item) item) (last path-items 2) "/"))
	pwd)))

  (setq eshell-prompt-function
	(lambda nil
	  (concat
	   (propertize (make-string (window-body-width) ?─) 'face '(:foreground "#234768"))
	   (propertize "\n" 'face nil)
	   (propertize "╭⟢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil)
	   (propertize (user-login-name) 'face '(:foreground "#5DC078"))
	   (propertize "@" 'face '(:foreground "#0057FF"))
	   (propertize (system-name) 'face '(:foreground "#0083FF"))
	   (propertize " ⯌ " 'face nil)
	   (propertize "￨" 'face '(:foreground "#74CAFF"))
	   (propertize (pwd-shorten-dirs (abbreviate-file-name (eshell/pwd)))
		       'face '(:foreground "#74CAFF"))
	   (propertize " ⯌ " 'face nil)
	   (propertize (display-git-prompt-branch) 'face '(:foreground "#A2DEB2"))
	   (propertize "\n" 'face nil)
	   (propertize "╰🡢" 'face '(:foreground "#A2DEB2"))
	   (propertize " " 'face nil))))

  (setq eshell-highlight-prompt nil)

    ;; Set this to match eshell-prompt-function
    (setq eshell-prompt-regexp "^╰🡢 ")

    ;; define portable aliases
    (setq eshell-command-aliases-list ())

    (defun +alias (al cmd)
      "handy wrapper function to convert alias symbols to alias
	strings to avoid writing 4 quotes per alias. AL is a single-word
	symbol naming the alias, CMD is a list symbol describing the
	command."
      (add-to-list 'eshell-command-aliases-list
		   (list (symbol-name al)
			 (mapconcat 'symbol-name cmd " "))))

    ;; actual aliases
    (+alias 'l      '(ls -laF))
    (+alias 'll     '(ls -l))
    (+alias 'la     '(ls -a))
    (+alias 'lt     '(ls -ltr $*))
    (+alias '..     '(cd ..))
    (+alias '...    '(cd ../..))
    (+alias '....   '(cd ../../..))
    (+alias '.....  '(cd ../../../..))
    (+alias 'md     '(mkdir -p))
    (+alias 'emacs  '(find-file $1))
    (+alias 'less   '(find-file-read-only $1))

    ;; Docker
    (+alias 'd '(docker $*))
    (+alias 'dc '(docker-compose $*))
    (+alias 'dm '(docker-machine $*))

    ;; HTTPie
    (+alias 'https '(http --default-scheme=https $*))
#+end_src
* COMMENT Local Variables
# Local variables:
# eval: (add-hook 'after-save-hook (lambda nil (org-babel-tangle)) nil t)
# End:
