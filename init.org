#+PROPERTY: header-args :tangle yes :comments yes :results silent

* TODO UI Tweaks
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
#+END_SRC

* DONE Package manager/Use-Package
[[help:list-packages][Help for list packages]]
** DONE Adding more package-archives and Install use-package
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
	       '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/") t)
  (add-to-list 'package-archives
	       '("org" . "https://orgmode.org/elpa/") t)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC
* DONE Environment variables
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config (exec-path-from-shell-initialize))
#+END_SRC
* TODO Figlet / Other demo staff
** TODO Figlet
** DONE Command Log mode
#+BEGIN_SRC emacs-lisp
  (use-package command-log-mode
    :config (global-command-log-mode)
    :bind ("C-c o" . clm/toggle-command-log-buffer))
#+END_SRC
* TODO Magit
** Installing Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :commands (magit-status)
    :bind ("C-x g" . magit-status))
#+END_SRC
* TODO Custom file
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)
#+END_SRC
* TODO Spelling/Linting
** DONE Flyspell
#+BEGIN_SRC emacs-lisp
  (use-package flyspell
    :hook ((prog-mode . flyspell-prog-mode)
	   (text-mode . flyspell-mode)))
#+END_SRC
** TODO Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :hook ((prog-mode . flycheck-mode)))
#+END_SRC
*** TODO Don't complain in org-mode elisp snippets
* TODO Don't as about custom variables
* TODO Make source code blocks default to ~emacs-lisp~

* Local Variables
# Local variables:
# eval: (add-hook 'after-save-hook (lambda () (org-babel-tangle)) nil t)
# End:
